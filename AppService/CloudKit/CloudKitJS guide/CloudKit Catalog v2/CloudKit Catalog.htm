<!DOCTYPE html>
<!-- saved from url=(0075)https://cdn.apple-cloudkit.com/cloudkit-catalog/#readme/CloudKit-on-the-web -->
<html><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">

<title>CloudKit Catalog</title>
<link href="./CloudKit Catalog_files/cloudkit-catalog.css" rel="stylesheet">
<link rel="stylesheet" href="./CloudKit Catalog_files/xcode.css"><style type="text/css">@font-face {
  font-family: 'rbicon';
  src: url(chrome-extension://dipiagiiohfljcicegpgffpbnjmgjcnf/fonts/rbicon.woff2) format("woff2");
  font-weight: normal;
  font-style: normal; }
</style></head>
<body>
<div class="main-pane" id="main">
<div class="background-strip"></div>
<div class="left-pane" id="left-pane">
<div class="home">
<div class="icon" id="home-icon"></div>
<div class="toggle-buttons">
<div class="expand-button left-pane-toggle-button" id="expand-left-column">⟩</div>
<div class="contract-button left-pane-toggle-button hide" id="contract-left-column">⟨</div>
</div>
<div class="mask"></div>
</div>
<div class="left-bar-wrapper">
<div class="vertical-scroll-container">
<div class="menu-items">
<div class="menu-item-container readme caret expanded selected">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#readme" title="README">
<div class="icon"></div>
<div class="name">README</div>
</a>
<div class="tab-menu "><div class="tab-menu-item selected">CloudKit on the web</div><div class="tab-menu-item">Server-side CloudKit with node.js</div></div></div>
<div class="menu-item-container authentication">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#authentication" title="Authentication">
<div class="icon"></div>
<div class="name">Authentication</div>
</a>
</div>
<div class="menu-item-container discoverability caret">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#discoverability" title="Discoverability">
<div class="icon"></div>
<div class="name">Discoverability</div>
</a>
<div class="tab-menu "><div class="tab-menu-item">fetchCurrentUserIdentity</div><div class="tab-menu-item">discoverAllUserIdentities</div><div class="tab-menu-item">discoverUserIdentityWithEmailAddress</div><div class="tab-menu-item">discoverUserIdentityWithUserRecordName</div></div></div>
<div class="menu-item-container query">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#query" title="Query">
<div class="icon"></div>
<div class="name">Query</div>
</a>
</div>
<div class="menu-item-container zones caret">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#zones" title="Zones">
<div class="icon"></div>
<div class="name">Zones</div>
</a>
<div class="tab-menu "><div class="tab-menu-item">saveRecordZones</div><div class="tab-menu-item">deleteRecordZones</div><div class="tab-menu-item">fetchRecordZones</div><div class="tab-menu-item">fetchAllRecordZones</div></div></div>
<div class="menu-item-container records caret expanded">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#records" title="Records">
<div class="icon"></div>
<div class="name">Records</div>
</a>
<div class="tab-menu "><div class="tab-menu-item selected">saveRecords</div><div class="tab-menu-item">deleteRecords</div><div class="tab-menu-item">fetchRecords</div></div></div>
<div class="menu-item-container sync caret">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#sync" title="Sync">
<div class="icon"></div>
<div class="name">Sync</div>
</a>
<div class="tab-menu "><div class="tab-menu-item">fetchDatabaseChanges</div><div class="tab-menu-item">fetchRecordZoneChanges</div></div></div>
<div class="menu-item-container sharing caret">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#sharing" title="Sharing">
<div class="icon"></div>
<div class="name">Sharing</div>
</a>
<div class="tab-menu "><div class="tab-menu-item">fetchRecordInfos</div><div class="tab-menu-item">acceptShares</div><div class="tab-menu-item">shareWithUI</div></div></div>
<div class="menu-item-container subscriptions caret">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#subscriptions" title="Subscriptions">
<div class="icon"></div>
<div class="name">Subscriptions</div>
</a>
<div class="tab-menu "><div class="tab-menu-item">saveSubscriptions</div><div class="tab-menu-item">deleteSubscriptions</div><div class="tab-menu-item">fetchSubscriptions</div><div class="tab-menu-item">fetchAllSubscriptions</div></div></div>
<div class="menu-item-container notifications">
<div class="border"></div>
<a class="menu-item" href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#notifications" title="Notifications">
<div class="icon"></div>
<div class="name with-subtitle">Notifications</div>
<div class="subtitle" id="connected-text">Disconnected</div>
<div class="alert hide">
<div class="alert-text" id="number-of-alerts">0</div>
</div>
</a>
</div>
</div>
</div>
<a class="menu-item documentation" href="https://developer.apple.com/library/prerelease/ios/documentation/CloudKitJS/Reference/CloudKitJavaScriptReference/index.html" target="_blank" title="Documentation">
<div class="icon"></div>
<div class="name">Documentation</div>
</a>
</div>
</div>
<div class="right-pane">
<div class="header">
<div class="left-button disabled">
<div class="play-icon"></div>
<button class="link" id="run-button" disabled="">Run Code</button>
</div>
<span id="username">Unauthenticated User</span>
</div>
<div class="alert-bar alert-showing" id="config-bar">
<span class="config-key">Container:</span>
<span class="config-value" id="config-container">iCloud.com.example.CloudKitCatalog</span>
<span class="config-key">Environment:</span>
<span class="config-value" id="config-environment">production</span>
</div>
<div class="vertical-scroll-container alert-showing">
<div class="page" id="page">
<div class="page-segments"><div class="page-segment selected"><div class="description">
<h1>CloudKit on the web</h1>
<p>This web application provides executable sample code for the core API methods provided by the CloudKit JS
                    JavaScript library. While these methods cover many typical use cases, there are more flexible versions
                    available if needed which allow for batch requests and more configuration. The user is advised to refer to the
                    <a href="https://developer.apple.com/library/prerelease/ios/documentation/CloudKitJS/Reference/CloudKitJavaScriptReference/index.html">CloudKit JS Reference</a>
                    for more information.</p>
<p>All code examples can be run by clicking the play button at the top of the page. The results will be displayed below
                    the sample code block.</p>
<h2>Obtaining the CloudKit JS library</h2>
<p>CloudKit JS is hosted at
                    <a href="./CloudKit Catalog_files/cloudkit.js">https://cdn.apple-cloudkit.com/ck/2/cloudkit.js</a>.
                    Include the library on your web page using either of the two methods below. You will
                    automatically get updates and bug fixes as they are released.</p>
<h3>Option #1 - Load CloudKit JS synchronously</h3>
<pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.apple-cloudkit.com/ck/2/cloudkit.js"</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>
<h3>Option #2 - Load CloudKit JS asynchronously</h3>
<pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- Listen for the cloudkitloaded event on the window object. --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript">
  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'cloudkitloaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>{
    <span class="hljs-comment">// Now the global namespace CloudKit is defined and you can proceed</span>
    <span class="hljs-comment">// to configure your application.</span>
  });
</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>

<span class="hljs-comment">&lt;!-- Include the script with the ‘async’ attribute. --&gt;</span>
<span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"https://cdn.apple-cloudkit.com/ck/2/cloudkit.js"</span> <span class="hljs-attr">async</span>&gt;</span><span class="undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></code></pre>
<h2>Configuring CloudKit JS</h2>
<p>The first use of the CloudKit namespace in your javascript app should be configuration code.</p>
<pre><code class="hljs javascript">CloudKit.configure({
  locale: <span class="hljs-string">'en-us'</span>,

  containers: [{

    <span class="hljs-comment">// Change this to a container identifier you own.</span>
    containerIdentifier: <span class="hljs-string">'com.example.apple-samplecode.cloudkit-catalog'</span>,

    apiTokenAuth: {
      <span class="hljs-comment">// And generate a web token through CloudKit Dashboard.</span>
      apiToken: <span class="hljs-string">'&lt;insert your token here&gt;'</span>,

      persist: <span class="hljs-literal">true</span>, <span class="hljs-comment">// Sets a cookie.</span>

      signInButton: {
        id: <span class="hljs-string">'apple-sign-in-button'</span>,
        theme: <span class="hljs-string">'black'</span> <span class="hljs-comment">// Other options: 'white', 'white-with-outline'.</span>
      },

      signOutButton: {
        id: <span class="hljs-string">'apple-sign-out-button'</span>,
        theme: <span class="hljs-string">'black'</span>
      }
    },

    environment: <span class="hljs-string">'development'</span>
  }]
});</code></pre>
<p>Change the container identifier to one that you own.
                    For more information on how to create a container see <a href="https://developer.apple.com/library/etc/redirect/ios_cloudkit_dashboard_guide">CloudKit Quick Start</a>.
                    You can can create a container and generate an API token through the
                    <a href="https://icloud.developer.apple.com/dashboard/">CloudKit Dashboard</a>.
                </p>
<h2>Browser support</h2>
<p>CloudKit JS is supported on Safari, Firefox, Chrome, Internet Explorer and Microsoft Edge, including embedded web views.
                    For security reasons, a mobile web view must launch the Apple sign-in page in a native browser in order
                    to use iCloud authentication.</p>
<br>
<br></div></div><div class="page-segment"><div class="description">
<h1>Server-side CloudKit with node.js</h1>
<p>A powerful CloudKit feature is the ability to make API calls with a server script. This feature is enabled by creating a server-to-server key in the
                    <em>API Access</em> section of <a href="https://icloud.developer.apple.com/dashboard/">CloudKit Dashboard</a>. Such a key allows
                    a server script to authenticate with CloudKit and make API calls to the <b>public database</b> with the inherited privileges of the creator of the key.
                    In this section we will explain this process for a node.js script using CloudKit JS.
                </p>
<h2>Creating a server-to-server key</h2>
<p>If you are on a Mac, you already have OpenSSL installed and you can generate a private key in Terminal with this command:</p>
<pre><code class="bash hljs">openssl ecparam -name prime256v1 -genkey -noout -out eckey.pem
</code></pre>
<p>This will create the file <code>eckey.pem</code> in your working directory. In <a href="https://icloud.developer.apple.com/dashboard/">CloudKit Dashboard</a> navigate
                    to <em>API Access -&gt; Server-to-Server Keys -&gt; Add Server-to-Server Key</em> and paste the output of the following command into the <b>Public Key</b> text field of the new key.
                </p>
<pre><code class="bash hljs">openssl ec -in eckey.pem -pubout
</code></pre>
<p>Hit <em>Save</em> and the <b>Key ID</b> attribute will get populated. You will use this key ID in configuring your node script.
                </p>
<h2>Installing dependencies</h2>
<p>In order to use CloudKit JS server-side you will need a <em>fetch</em> implementation such as <b>node-fetch</b> which you can install from NPM. You must also download CloudKit JS itself from Apple’s CDN.</p>
<pre><code class="bash hljs">npm install node-fetch
curl https://cdn.apple-cloudkit.com/ck/2/cloudkit.js &gt; cloudkit.js
</code></pre>
<h2>Configuring CloudKit JS in a node script</h2>
<p>Create a script file in your working directory and add the following configuration code.</p>
<pre><code class="javascript hljs"><span class="hljs-keyword">var</span> fetch = <span class="hljs-built_in">require</span>(<span class="hljs-string">'node-fetch'</span>);
<span class="hljs-keyword">var</span> CloudKit = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./cloudkit'</span>);

CloudKit.configure({
  services: {
    fetch: fetch,
    logger: <span class="hljs-built_in">console</span>
  },
  containers: [{

    <span class="hljs-comment">// Change this to a container identifier that you own.</span>
    containerIdentifier: <span class="hljs-string">'com.example.apple-samplecode.cloudkit-catalog'</span>,

    environment: <span class="hljs-string">'development'</span>,

    serverToServerKeyAuth: {

      <span class="hljs-comment">// This is the key ID you generated in CloudKit Dashboard.</span>
      keyID: <span class="hljs-string">'&lt;insert key ID&gt;'</span>,

      <span class="hljs-comment">// This should reference the private key file that you used to</span>
      <span class="hljs-comment">// generate the above key ID.</span>
      privateKeyFile: __dirname + <span class="hljs-string">'/eckey.pem'</span>

    }
  }]
});
</code></pre>
<p><b>Note:</b> Never expose or share the above private key with anyone, including Apple, as it has unrestricted access to your CloudKit container.</p>
<h2>Authenticating and using the APIs</h2>
<p>Before making API calls your script needs to authenticate with CloudKit using the server-to-server key that was set in the
                    configuration code.</p>
<pre><code class="javascript hljs"><span class="hljs-keyword">var</span> container = CloudKit.getDefaultContainer();

<span class="hljs-comment">// Server to server keys only allow calls to the public database.</span>
<span class="hljs-keyword">var</span> database = container.publicCloudDatabase;


<span class="hljs-comment">// Authenticate with CloudKit using the server-to-server</span>
<span class="hljs-comment">// key set in CloudKit.configure()</span>
container.setUpAuth()
  .then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">userInfo</span>) </span>{

    <span class="hljs-comment">// The userInfo is that of the user who created the key in CloudKit Dashboard.</span>
    <span class="hljs-comment">// If this user has permission to write a record of type Item to the</span>
    <span class="hljs-comment">// public database, the following call will succeed.</span>
    <span class="hljs-keyword">return</span> database.saveRecords({ recordType: <span class="hljs-string">'Item'</span> });

  }).then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) </span>{

    <span class="hljs-keyword">var</span> savedRecord = response.records[<span class="hljs-number">0</span>];
    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'Record name:'</span>, savedRecord.recordName);

    process.exit(<span class="hljs-number">0</span>);

  }).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) </span>{
    <span class="hljs-comment">// Handle the error.</span>
    process.exit(<span class="hljs-number">1</span>);
  });
</code></pre>
<p>You are now ready to start scripting with CloudKit JS and node.js. You may wish to look at the sections <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#query">Query</a> and
                    <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#records">Records</a> for examples of API calls that you can use in server-side scripts.</p>
<br>
<br></div></div></div>
</div>
</div>
</div>
</div>
<div class="hide" id="dialog" tabindex="0">
<div id="dialog-text"></div>
</div>
<div class="hide">
<div id="authentication">

</div>
<div id="discoverability">
<div class="description">
<h4>Class: Container</h4>
<h1>.fetchCurrentUserIdentity()</h1>
<p>This sample demonstrates how to fetch the currently signed-in user’s <code>userIdentity</code> object.
                If the current user has made himself discoverable to the app, this object will have nonempty <code>nameComponents</code>.
                </p>
</div>
<div class="description">
<h4>Class: Container</h4>
<h1>.discoverAllUserIdentities()</h1>
<p>This sample demonstrates how to obtain a list of <code>UserIdentity</code> objects corresponding to users of the app
                in the signed-in user’s iCloud Contacts who have made themselves discoverable to the app.</p>
</div>
<div class="description">
<h4>Class: Container</h4>
<h1>.discoverUserIdentityWithEmailAddress()</h1>
<p>This sample demonstrates how to look up a user’s discoverable information by email address. This method will
                always return a <code>userIdentity</code> object with the <code>lookupInfo</code> field populated. The other fields will be
                populated only if a matching discoverable user is found.</p>
</div>
<div class="description">
<h4>Class: Container</h4>
<h1>.discoverUserIdentityWithUserRecordName()</h1>
<p>This sample demonstrates how to look up a discoverable user’s identity by user record name.
                The <code>.catch()</code> block is invoked when no matching user is found.</p>
</div>
</div>
<div id="not-found">
<div class="description">
<h1>Page Not Found</h1>
<p>The page you were looking for was not found. Please use the menu on the left to navigate the app.</p>
</div>
</div>
<div id="notifications">
<div class="description">
<h4>Class: Container</h4>
<h1>.registerForNotifications()</h1>
<p>This sample shows how to add a notification listener to the container. The listener will get called
                whenever the server sends us a notification of an update to a subscription. In order to receive notifications your app
                must park a connection with the notification backend using <code>registerForNotifications</code>.</p>
</div>
</div>
<div id="records">



</div>
<div id="sharing">
<div class="description">
<h4>Class: Container</h4>
<h1>.fetchRecordInfos()</h1>
<p>This sample demonstrates how to resolve a record from a stable short GUID.</p>
</div>
<div class="description">
<h4>Class: Container</h4>
<h1>.acceptShares()</h1>
<p>This sample demonstrates how to accept a share with a short GUID.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.shareWithUI()</h1>
<p>This sample shows how to share a record with the default sharing UI.</p>
</div>
</div>
<div id="subscriptions">
<div class="description">
<h4>Class: Database</h4>
<h1>.saveSubscriptions()</h1>
<p>This sample demonstrates how a user can subscribe to a change to a record in a specific zone
                (<i>zone subscription</i>) as well as to changes to records that match a query condition
                (<i>query subscription</i>). Once subscribed, your app can register for <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#notifications">notifications</a>
                of changes.
                </p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.deleteSubscriptions()</h1>
<p>This sample shows how to delete a subscription by ID.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.fetchSubscriptions()</h1>
<p>This sample shows how to fetch a subscription by ID.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.fetchAllSubscriptions()</h1>
<p>This sample shows how to fetch all subscriptions.</p>
</div>
</div>
<div id="sync">
<div class="description">
<h4>Class: Database</h4>
<h1>.fetchDatabaseChanges()</h1>
<p>This sample demonstrates how an authenticated user can get all changed zones relative to a meta-sync token in their
                private or shared database.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.fetchRecordZoneChanges()</h1>
<p>This sample demonstrates how an authenticated user can get all changes relative to a sync token in a custom or shared zone.
                    If no sync token is provided all records in the zone are returned. The response will always contain a new sync token
                    which can be cached in the client and sent in a new sync request. The sync token can also be used for paginating a result
                    set. The <code>moreComing</code> boolean on the response indicates if the result set is incomplete.</p>
<p>When you have a zone-level <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#subscriptions">subscription</a> you can get
                    <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#notifications">notified</a> of changes to that zone and you would typically run <code>fetchRecordZoneChanges</code>
                    to then fetch the latest changes and bring your client up-to-date.
                </p>
</div>
</div>
<div id="zones">
<div class="description">
<h4>Class: Database</h4>
<h1>.saveRecordZones()</h1>
<p>This sample shows how to create a custom zone in the user’s private database. Zones are useful for
                    syncing a user’s data. Once you have created a custom zone you will be able to
                    <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#records">create records</a> in that zone and test the <a href="https://cdn.apple-cloudkit.com/cloudkit-catalog/#sync">sync</a> feature.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.deleteRecordZones()</h1>
<p>This sample shows how to delete a custom zone by name from the private database.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.fetchRecordZones()</h1>
<p>This sample shows how to fetch a record zone by name from the private database.</p>
</div>
<div class="description">
<h4>Class: Database</h4>
<h1>.fetchAllRecordZones()</h1>
<p>This sample shows how to list all record zones in your private database. The response will always contain the default zone.</p>
</div>
</div>
<div id="query">

</div>
<div id="readme">


</div>
</div>
<script>
        /*
         * Initialize the global objects we will need.
         */
        if(typeof CKCatalog === 'undefined') {
            CKCatalog = {};
        }

        if(typeof CKCatalog.tabs === 'undefined') {
            CKCatalog.tabs = {
                'readme': [
                    { title: 'CloudKit on the web' },
                    { title: 'Server-side CloudKit with node.js' }
                ],
                'not-found': [{}]
            };
        }

        if(typeof CKCatalog.FormInputHelpers === 'undefined') {
            CKCatalog.FormInputHelpers = {
                Filters: {}
            };
        }
    </script><script src="./CloudKit Catalog_files/script-293a8c4e-1b1e-438f-83fa-67ab10296b64.js"></script>































<script async="" onload="CKCatalog.tabManager.initializeCodeHighlighting()" src="./CloudKit Catalog_files/highlight.pack.js">
</script>
<script async="" src="./CloudKit Catalog_files/cloudkit.js"></script>


<span id="sbmarwbthv5"></span><div id="rememberry__extension__root" style="all: unset;"></div></body></html>